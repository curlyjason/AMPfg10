<?php
App::uses('AppModel', 'Model');
/**
 * Shipment Model
 *
 * @property Order $Order
 */
class Shipment extends AppModel {

/**
 * belongsTo associations
 *
 * @var array
 */
	public $belongsTo = array(
		'Order' => array(
			'className' => 'Order',
			'foreignKey' => 'order_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		),
        'TaxRate' => array(
			'className' => 'TaxRate',
			'foreignKey' => 'tax_rate_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		)

	);
    public $validate = array(
        'first_name' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A first name is required'
            )
        ),
        'email' => array(
//            'email' => array(
//                'rule' => array('email'),
//                'message' => 'A properly formatted email address is required'
//            ),
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'An email is required'
            )
        ),
        'phone' => array(
//            'phone' => array(
//                'rule' => array('phone', null, 'us'),
//                'message' => 'A properly formatted phone number is required'
//            ),
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A phone number is required'
            )
        ),
        'address' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'An address is required'
            )
        ),
        'city' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A city is required'
            )
        ),
        'state' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A state or province is required'
            )
        ),
        'country' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A country is required'
            )
        ),
        'zip' => array(
            'zipcode' => array(
//                'rule' => array('postal', null, 'all'),
                'rule' => array('notBlank'),
                'message' => 'A properly formatted zip/postal code is required'
            )
//            'required' => array(
//                'rule' => array('notBlank'),
//                'message' => 'A zip/postal code is required'
//            )
        ),
        'carrier' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A carrier is required'
            )
        ),
        'method' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A method is required'
            )
        ),
        'billing' => array(
            'required' => array(
                'rule' => array('notBlank'),
                'message' => 'A billing type is required'
            )
        ),
//        'tax_rate_id' => array(
//            'required' => array(
//                'rule' => array('notBlank'),
//                'message' => 'A tax jurisdiction'
//            )
//        ),
    );

    /**
     * Override Model::validates()
     *
     * This override function will handle multiple-country ZIP code validation
     * And handles Great Britains lack of provinces, mexico ZIP validation
     *
     */

    public function validates($options = array())
    {
        //Setup the countryCode as a simpler variable
        $countryCode = strtolower($this->data['Shipment']['country']);

        //Alter countryCode for mexico validation
        $countryCode = ($countryCode == 'mx') ? 'us' : $countryCode;

        //Update zip code validation to the proper country code
        $this->validate['zip']['zipcode']['rule'] = ['postal', null, $countryCode];

        //Remove the state / province requirement for UK
        if($countryCode = 'gb'){
            $this->validate['state'] = [];
        }
        return parent::validates($options); // TODO: Change the autogenerated stub
    }

    /**
	 * Fetch all shipments associated with the supplied orderInList
	 * Return a list of shipment_cost indexed by order_id
	 * 
	 * @param array $orderInList
	 * @return list array
	 */
	public function fetchShipmentCharges($orderInList) {
		$shipments = $this->find('list', array(
			'conditions' => array(
				'Shipment.order_id' => $orderInList
			),
			'fields' => array('order_id', 'shipment_cost')
		));
		return $shipments;
	}
	
	/**
	 * Save a shipment from data provided by the shipment edit on the status page
	 * 
	 * @param array $data the serialized data from the ajax call
	 * @return json either the replacement html for the display or FALSE
	 */
	public function saveOrderShipment($data) {
		if($this->save($data)){
            return $data['Shipment']['order_id'];
//            if(!empty($data['Shipment']['tracking'])){
//                $return = array('shipCell_' . $data['Shipment']['order_id'] => $data['Shipment']['carrier'] . ' :: ' . $data['Shipment']['tracking']);
//            }
//			$return = array(
//				'shipCell_' . $data['Shipment']['order_id'] => $data['Shipment']['carrier'] . ' :: ' . $data['Shipment']['method']
//			);
		} else {
			return FALSE;
		}
	}


}
